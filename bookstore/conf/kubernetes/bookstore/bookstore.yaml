apiVersion: v1
kind: Service
metadata:
  annotations: {}
  finalizers: []
  labels: {app: bookstore, app.kubernetes.io/managed-by: graphite-jenkins-gke}
  name: bookstore-rest-0c562e66-ae75-485a-85ce-70d1ff6b2de4
  ownerReferences: []
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  ports:
  - {port: 9096, protocol: TCP, targetPort: 9096}
  selector: {app: bookstore}
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  finalizers: []
  labels: {app: bookstore, app.kubernetes.io/managed-by: graphite-jenkins-gke}
  name: bookstore-rest-6de6a33d-9c61-43ef-bc09-22bbc9781555
  ownerReferences: []
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  ports:
  - {port: 9095, protocol: TCP, targetPort: 9095}
  selector: {app: bookstore}
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  finalizers: []
  labels: {app: bookstore, app.kubernetes.io/managed-by: graphite-jenkins-gke}
  name: bookstore-rest-096afda8-7c9a-475b-b1f6-cc431f6d28af
  ownerReferences: []
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  ports:
  - {port: 9090, protocol: TCP, targetPort: 9090}
  selector: {app: bookstore}
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  annotations: {}
  finalizers: []
  labels: {}
  name: kindel-book-store--1-0-0-ballerina-conf-config-map
  ownerReferences: []
data:
  ballerina.conf: |-
    [listenerConfig]
    host="0.0.0.0"
    httpPort=9090
    httpsPort=9095
    keyStore.path="${ballerina.home}/bre/security/ballerinaKeystore.p12"
    keyStore.password="ballerina"
    trustStore.path="${ballerina.home}/bre/security/ballerinaTruststore.p12"
    trustStore.password="ballerina"
    tokenListenerPort=9096

    [authConfig]
    authorizationHeader="Authorization"
    removeAuthHeaderFromOutMessage=true

    [keyManager]
    serverUrl="https://localhost:9443"
    username="admin"
    password="admin"
    tokenContext="oauth2"
    timestampSkew=5000


    [jwtTokenConfig]
    issuer="https://localhost:9443/oauth2/token"
    audience="http://org.wso2.apimgt/gateway"
    certificateAlias="wso2apim"


    [jwtConfig]
    header="X-JWT-Assertion"

    [caching]
    enabled=true
    tokenCache.expiryTime=900000
    tokenCache.capacity=10000
    tokenCache.evictionFactor=0.25

    [analytics]
    enable=false
    uploadingTimeSpanInMillis=600000
    uploadingEndpoint="https://localhost:9444/analytics/v1.0/usage/upload-file"
    rotatingPeriod=600000
    task.uploadFiles=true
    username="admin"
    password="admin"

    [http2]
    enable=false

    [mutualSSLConfig]
    protocolName="TLS"
    protocolVersions="TLSv1.2,TLSv1.1"
    ciphers="TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  ,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256  ,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
    sslVerifyClient="optional"

    ["b7a.users"]
    ["b7a.users.generalUser1"]
    password="5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8"

    [validationConfig]
    enableRequestValidation = false
    enableResponseValidation = false


    [throttlingConfig]
    enabledGlobalTMEventPublishing = false
    jmsConnectioninitialContextFactory = "bmbInitialContextFactory"
    jmsConnectionProviderUrl= "amqp://admin:admin@carbon/carbon?brokerlist='tcp://localhost:5672'"
    jmsConnectionUsername = ""
    jmsConnectionPassword = ""
    throttleEndpointUrl = "https://localhost:9443/endpoints"
    throttleEndpointbase64Header = "admin:admin"

    [tokenRevocationConfig]
      [tokenRevocationConfig.realtime]
        enableRealtimeMessageRetrieval = false
        jmsConnectionTopic = "tokenRevocation"
        jmsConnectioninitialContextFactory = "bmbInitialContextFactory"
        jmsConnectionProviderUrl= "amqp://admin:admin@carbon/carbon?brokerlist='tcp://localhost:5672'"
        jmsConnectionUsername = ""
        jmsConnectionPassword = ""
      [tokenRevocationConfig.persistent]
        enablePersistentStorageRetrieval = false
        useDefault = true
        hostname = "https://127.0.0.1:2379/v2/keys/jti/"
        username = "root"
        password = "root"

    [httpClients]
      verifyHostname=true
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations: {}
  finalizers: []
  labels: {app: bookstore, app.kubernetes.io/managed-by: graphite-jenkins-gke}
  name: bookstore-deployment-jenkins
  ownerReferences: []
spec:
  replicas: 2
  template:
    metadata:
      annotations: {}
      finalizers: []
      labels: {app: bookstore}
      ownerReferences: []
    spec:
      containers:
      - args: []
        command: []
        env:
        - {name: b7a_log_level, value: TRACE}
        - {name: CONFIG_FILE, value: /home/ballerina/conf/ballerina.conf}
        envFrom: []
        image: rajithk90/bookstoregateway:3.0.0
        imagePullPolicy: Always
        name: bookstore-deployment-jenkins
        ports:
        - {containerPort: 9090, protocol: TCP}
        - {containerPort: 9095, protocol: TCP}
        - {containerPort: 9096, protocol: TCP}
        volumeMounts:
        - {mountPath: /home/ballerina/conf/, name: kindel-book-store--1-0-0-ballerina-conf-config-map-volume,
          readOnly: false}
      hostAliases: []
      imagePullSecrets: []
      initContainers: []
      nodeSelector: {}
      tolerations: []
      volumes:
      - configMap:
          items: []
          name: kindel-book-store--1-0-0-ballerina-conf-config-map
        name: kindel-book-store--1-0-0-ballerina-conf-config-map-volume
